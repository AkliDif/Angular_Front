{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let StudentService = /*#__PURE__*/(() => {\n  class StudentService {\n    constructor(http) {\n      this.http = http;\n      /**\r\n       * Services Documentation:\r\n       * https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\r\n       */\n      this.url = \"http://localhost:4200/assets/student.json\";\n      this.studentList = [];\n      /**\r\n       * Observable which contains the list of the tickets.\r\n       * Naming convention: Add '$' at the end of the variable name to highlight it as an Observable.\r\n       */\n      this.students$ = new BehaviorSubject(this.studentList);\n      this.getStudents().subscribe(students => {\n        this.studentList = students;\n        this.students$.next(this.studentList);\n      });\n    }\n    getStudents() {\n      return this.http.get(this.url).pipe(map(response => response.students));\n    }\n    deleteStudent(student) {\n      // remove an element from ana array https://www.angularjswiki.com/angular/how-to-remove-an-element-from-array-in-angular-or-typescript/\n      this.studentList = this.studentList.filter(s => s.id !== student.id);\n      this.students$.next(this.studentList);\n      console.log(this.studentList);\n    }\n    addStudent(student) {\n      this.studentList.push(student);\n      this.students$.next(this.studentList);\n    }\n    getNewId() {\n      return this.studentList.length + 1;\n    }\n    getStudent(id) {\n      return this.students$.pipe(map(students => students.find(student => student.id === id)));\n    }\n    updateStudent(updatedStudent) {\n      console.log(\"before updating\", this.studentList);\n      const index = this.studentList.findIndex(student => student.id === updatedStudent.id);\n      if (index !== -1) {\n        this.studentList[index] = updatedStudent;\n        this.students$.next(this.studentList);\n      }\n      console.log(\"after updating\", this.studentList);\n    }\n    static #_ = this.ɵfac = function StudentService_Factory(t) {\n      return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StudentService,\n      factory: StudentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return StudentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}